# Dockerfile for building a layer from ReadyToRun binaries from GitLab
#

FROM ubuntu:latest AS builder
ARG TRACER_VERSION
ARG ARCH

# make the args mandatory
RUN : "${TRACER_VERSION:?TRACER_VERSION needs to be provided}"
RUN : "${ARCH:?ARCH needs to be provided}"

RUN apt-get update && \
    apt-get install -y zip

WORKDIR /opt

COPY artifacts artifacts
RUN mkdir -p datadog

RUN if [ "${ARCH}" = "amd64" ]; then \
      # Copy artifacts from the GitLab runner
      cp -r artifacts/x64/* datadog; \
      # Move native files to the expected location
      mv datadog/Datadog.Trace.ClrProfiler.Native.so datadog/linux-x64; \
      mv datadog/loader.conf datadog/linux-x64; \
    fi

RUN if [ "${ARCH}" = "arm64" ]; then \
      # Copy artifacts from the GitLab runner
      cp -r artifacts/arm64/* datadog; \
      # Move native files to the expected location
      mv datadog/Datadog.Trace.ClrProfiler.Native.so datadog/linux-arm64; \
      mv datadog/loader.conf datadog/linux-arm64; \
    fi

# remove files not used in AWS Lambda to keep the layer as small as possible
RUN \
    # Profiling and Crash Tracking
    rm -f datadog/Datadog.Linux.ApiWrapper.x64.so && \
    rm -f datadog/linux-*/libdatadog_profiling.so \
    # AAP (formerly AppSec and ASM)
    rm -f datadog/linux-*/libddwaf.so && \
    # Test Optimization (CI Visibility)
    rm -f datadog/net6.0/Datadog.Trace.MSBuild.* && \
    # Debugger symbols and XML docs
    rm -f datadog/net6.0/Datadog.Trace.pdb && \
    rm -f datadog/net6.0/Datadog.Trace.xml

# add file with tracer version
RUN echo ${TRACER_VERSION} > datadog/tracer_version.txt

# zip the layer
RUN mkdir /datadog
RUN zip -r -9 /datadog/dd_trace_dotnet.zip datadog

# keep the smallest possible docker image
FROM scratch
COPY --from=builder /datadog/dd_trace_dotnet.zip /
ENTRYPOINT ["/dd_trace_dotnet.zip"]
