# Dockerfile for building a layer from ReadyToRun binaries from GitLab
#

FROM ubuntu:latest AS builder
ARG TRACER_VERSION
ARG ARCH

# make the args mandatory
RUN : "${TRACER_VERSION:?TRACER_VERSION needs to be provided}"
RUN : "${ARCH:?ARCH needs to be provided}"

RUN apt-get update && \
    apt-get install -y zip curl

WORKDIR /opt

COPY artifacts artifacts
RUN mkdir -p datadog

# Copy artifacts from the GitLab runner
RUN if [ "${ARCH}" = "amd64" ]; then \
      cp -r artifacts/x64/* datadog; \
      mv datadog/Datadog.Trace.ClrProfiler.Native.so datadog/linux-x64; \
      mv datadog/loader.conf datadog/linux-x64; \
    fi

RUN if [ "${ARCH}" = "arm64" ]; then \
      cp -r artifacts/arm64/* datadog; \
      mv datadog/Datadog.Trace.ClrProfiler.Native.so datadog/linux-arm64; \
      mv datadog/loader.conf datadog/linux-arm64; \
    fi

# remove files unused in a serverless context to keep the package as small as possible
RUN rm -f datadog/**/createLogPath.sh && \
    rm -f datadog/**/libddwaf.so && \
    rm -f datadog/**/Datadog.Linux.ApiWrapper.x64.so && \
    rm -f datadog/**/Datadog.Profiler.Native.so && \
    rm -f datadog/**/Datadog.Trace.MSBuild.* && \
    rm -f datadog/**/libdatadog_profiling.so \
    rm -f datadog/**/*.pdb && \
    rm -f datadog/**/*.xml && \
    rm -f datadog/**/dd-dotnet.sh && \
    rm -f datadog/**/dd-dotnet && \
    rm -rf datadog/net461 && \
    rm -rf datadog/netstandard2.0 && \
    rm -rf datadog/netcoreapp3.1 && \
    rm -rf datadog/continuousprofiler \
    rm -rf datadog/win-*

# add file with tracer version
RUN echo ${TRACER_VERSION} > datadog/tracer_version.txt

# zip the layer
RUN mkdir /datadog
RUN zip -r -9 /datadog/dd_trace_dotnet.zip datadog

# keep the smallest possible docker image
FROM scratch
COPY --from=builder /datadog/dd_trace_dotnet.zip /
ENTRYPOINT ["/dd_trace_dotnet.zip"]
